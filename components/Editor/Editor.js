import { useEffect, useState } from 'react';
import Head from 'next/head';
import dynamic from 'next/dynamic';
const EditorJs = dynamic(() => import('react-editor-js'), { ssr: false });
import Typography from '@material-ui/core/Typography';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import SaveIcon from '@material-ui/icons/Save';
import Spinner from '../../components/UI/Spinner';

import { useSnackbar } from 'notistack';

import { makeStyles } from '@material-ui/core/styles';

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
  },
  titleInput: {
    marginBottom: '2rem',
    width: '70%',

    [theme.breakpoints.down('xs')]: {
      width: '100%',
    },
  },
  descriptionInput: {
    marginBottom: '2rem',
    width: '70%',

    [theme.breakpoints.down('xs')]: {
      width: '100%',
    },
  },
  // input: {
  //   height: 60,
  //   fontSize: 30,
  // },
}));

let editorInstance;

const CreateBlog = (props) => {
  const classes = useStyles();

  const { enqueueSnackbar } = useSnackbar();
  const [title, setTitle] = useState(props.data ? props.data.data.title : '');
  const [description, setDescription] = useState(
    props.data ? props.data.data.description : ''
  );
  const [editorTools, setEditorTools] = useState();

  // const [readOnly, toggleReadOnly] = useState(props.readOnly);

  const receivedBlogData = props.data ? props.data.data.blogData : null;

  // const toggleReadOnlyHandler = async () => {
  //   if (!readOnly) {
  //     const editorData = await editorInstance.save();
  //     if (editorData.blocks[0]) toggleReadOnly(!readOnly);
  //     else
  //       enqueueSnackbar('Please enter some data to switch to read only mode');
  //   } else toggleReadOnly(!readOnly);
  // };

  const onSaveHandler = async (editorInstance) => {
    try {
      const blogData = await editorInstance.save();
      if (!title || title === '')
        throw new Error('Title cannot be empty. Please enter title');
      if (!blogData.blocks[0])
        throw new Error('Blog cannot be empty. Please enter some data');
      props.onSave(blogData, title, description);
    } catch (err) {
      err.message
        ? enqueueSnackbar(`${err.message}`, { variant: 'error' })
        : enqueueSnackbar(`Couldn't save Editor data`, { variant: 'error' });
    }
  };

  let blogContent;
  if (!editorTools) blogContent = <Spinner center />;
  else
    blogContent = (
      <EditorJs
        instanceRef={(instance) => (editorInstance = instance)}
        tools={editorTools}
        // readOnly={readOnly}
        data={receivedBlogData}
        placeholder={`Let's write an awesome blog!`}
      />
    );

  useEffect(() => {
    const importConstants = async () => {
      const tools = (await import('../../components/Editor/EditorConstants'))
        .default;
      setEditorTools(tools);
    };

    importConstants();
  }, []);

  return (
    <div>
      <Head>
        <title>Create Blog</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <TextField
        className={classes.titleInput}
        // id='standard-multiline-flexible'
        label='Your Blog Title'
        multiline
        rowsMax={4}
        value={title}
        onChange={(event) => setTitle(event.target.value)}
      />

      <TextField
        // style={{ width: '100%' }}
        className={classes.descriptionInput}
        label='Your Blog Description'
        multiline
        rows={3}
        value={description}
        onChange={(event) => setDescription(event.target.value)}
        variant='outlined'
      />

      <Typography component='div' className={classes.blogContent}>
        {blogContent}
      </Typography>

      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <Button
          variant='contained'
          color='primary'
          size='large'
          startIcon={<SaveIcon />}
          onClick={() => onSaveHandler(editorInstance)}
          style={{ marginRight: 20 }}
        >
          Save
        </Button>
        {props.onDelete ? (
          <Button
            variant='contained'
            color='secondary'
            size='large'
            onClick={props.onDelete}
          >
            Delete Blog
          </Button>
        ) : null}

        {/* <Button
          variant='contained'
          color='primary'
          size='large'
          onClick={toggleReadOnlyHandler}
        >
          {readOnly ? 'Edit' : 'Read Only'}
        </Button> */}
      </div>
    </div>
  );
};

export default CreateBlog;
